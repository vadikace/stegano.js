define ->

  MATRIX = [
    [0.3536,  0.3536,  0.3536,  0.3536,  0.3536,  0.3536,  0.3536,  0.3536],
    [0.4904,  0.4157,  0.2778,  0.0975, -0.0975, -0.2778, -0.4157, -0.4904],
    [0.4619,  0.1913, -0.1913, -0.4619, -0.4619, -0.1913,  0.1913,  0.4619],
    [0.4157, -0.0975, -0.4904, -0.2778,  0.2778,  0.4904,  0.0975, -0.4157],
    [0.3536, -0.3536, -0.3536,  0.3536,  0.3536, -0.3536, -0.3536,  0.3536],
    [0.2778, -0.4904,  0.0975,  0.4157, -0.4157, -0.0975,  0.4904, -0.2778],
    [0.1913, -0.4619,  0.4619, -0.1913, -0.1913,  0.4619, -0.4619,  0.1913],
    [0.0975, -0.2778,  0.4157, -0.4904,  0.4904, -0.4157,  0.2778, -0.0975]
  ]

  MATRIX_T = [
    [0.3536,  0.4904,  0.4619,  0.4157,  0.3536,  0.2778,  0.1913,  0.0975],
    [0.3536,  0.4157,  0.1913, -0.0975, -0.3536, -0.4904, -0.4619, -0.2778],
    [0.3536,  0.2778, -0.1913, -0.4904, -0.3536,  0.0975,  0.4619,  0.4157],
    [0.3536,  0.0975, -0.4619, -0.2778,  0.3536,  0.4157, -0.1913, -0.4904],
    [0.3536, -0.0975, -0.4619,  0.2778,  0.3536, -0.4157, -0.1913,  0.4904],
    [0.3536, -0.2778, -0.1913,  0.4904, -0.3536, -0.0975,  0.4619, -0.4157],
    [0.3536, -0.4157,  0.1913,  0.0975, -0.3536,  0.4904, -0.4619,  0.2778],
    [0.3536, -0.4904,  0.4619, -0.4157,  0.3536, -0.2778,  0.1913, -0.0975]
  ]

  multiplyMatrices = (args...) ->
    result = args[0]
    for i in [1...args.length]
      a = result
      b = transpose(args[i])
      result = a.map( (row) ->
        b.map( (column) ->
          Math.round(column.reduce( (sum, value, index) ->
            sum + value * row[index]
          , 0))
        )
      )
    result

  transpose = (matrix) ->
    matrix[0].map( (uselessValue, colIndex) ->
      matrix.map( (uselessRow, rowIndex) ->
        matrix[rowIndex][colIndex]
      )
    )

  dct = (matrix, options={}) ->
    if options.inverse
      multiplyMatrices(MATRIX_T, matrix, MATRIX)
    else
      multiplyMatrices(MATRIX, matrix, MATRIX_T)

  {
    dct: dct
  }
